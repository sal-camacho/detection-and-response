Step 1: Examine a custom rule in Suricata
Explore the composition of the Suricata rule defined in the `custom.rules` file. Use the cat command to display the rule in the custom.rules file:
analyst@eca82271338c:~$ cat custom.rules
alert http $HOME_NET any -> $EXTERNAL_NET any (msg:"GET on wire"; flow:established,to_server; content:"GET"; http_method; sid:12345; rev:3;)

The action is the first part of the signature. It determines the action to take if all conditions are met.
Actions differ across network intrusion detection system (NIDS) rule languages, but some common actions are alert, drop, pass, and reject.
Using our example, the file contains a single alert as the action. The alert keyword instructs to alert on selected network traffic. The IDS will inspect the traffic packets and send out an alert in case it matches.

The next part of the signature is the header. The header defines the signature’s network traffic, which includes attributes such as protocols, source and destination IP addresses, source and destination ports, and traffic direction.
The next field after the action keyword is the protocol field. In our example, the protocol is http, which determines that the rule applies only to HTTP traffic.
The parameters to the protocol` http` field are `$HOME_NET any -> $EXTERNAL_NET any`. The arrow indicates the direction of the traffic coming from the `$HOME_NET` and going to the destination IP address `$EXTERNAL_NET`.
`$HOME_NET` is a Suricata variable defined in `/etc/suricata/suricata.yaml` that you can use in your rule definitions as a placeholder for your local or home network to identify traffic that connects to or from systems within your organization.
In this activity $HOME_NET is defined as the 172.21.224.0/20 subnet.
The word `any` means that Suricata catches traffic from any port defined in the `$HOME_NET` network.
The `$` symbol indicates the start of a variable. Variables are used as placeholders to store values.
So far, we know that this signature triggers an alert when it detects any http traffic leaving the home network and going to the external network.

The many available rule options allow you to customize signatures with additional parameters. Configuring rule options helps narrow down network traffic so you can find exactly what you’re looking for. As in our example, rule options are typically enclosed in a pair of parentheses and separated by semicolons.
The rule options in our example:
The `msg`: option provides the alert text. In this case, the alert will print out the text `“GET on wire”`, which specifies why the alert was triggered.
The `flow:established,to_server` option determines that packets from the client to the server should be matched. (In this instance, a server is defined as the device responding to the initial SYN packet with a SYN-ACK packet.)
The `content:"GET"` option tells Suricata to look for the word `GET` in the content of the `http.method` portion of the packet.
The `sid:12345` (signature ID) option is a unique numerical value that identifies the rule.
The `rev:3` option indicates the signature's revision which is used to identify the signature's version. Here, the revision version is 3.
To summarize, this signature triggers an alert whenever Suricata observes the text GET as the HTTP method in an HTTP packet from the home network going to the external network.

Step 2: Trigger a custom rule in Suricata
Trigger the rule and examine the alert logs that Suricata generates. List the files in the `/var/log/suricata` folder:
analyst@eca82271338c:~$ ls -l /var/log/suricata
total 0

Note that before running Suricata, there are no files in the `/var/log/suricata` directory.
In this activity, using `sudo` is required to process packet capture files with Suricata, although it may not be required in a real-world environment.
Run `suricata` using the custom.rules and `sample.pcap` files. `sudo suricata -r sample.pcap -S custom.rules -k none`:
analyst@eca82271338c:~$ sudo suricata -r sample.pcap -S custom.rules -k none
18/9/2025 -- 00:03:25 - <Notice> - This is Suricata version 6.0.1 RELEASE running in USER mode
18/9/2025 -- 00:03:26 - <Notice> - all 2 packet processing threads, 4 management threads initialized, engine started.
18/9/2025 -- 00:03:26 - <Notice> - Signal Received.  Stopping engine.
18/9/2025 -- 00:03:26 - <Notice> - Pcap-file module read 1 files, 200 packets, 54238 bytes

This command starts the Suricata application and processes the sample.pcap file using the rules in the custom.rules file. It returns an output stating how many packets were processed by Suricata.
Examine the options in the command:
The -r sample.pcap option specifies an input file to mimic network traffic. In this case, the sample.pcap file.
The -S custom.rules option instructs Suricata to use the rules defined in the custom.rules file.
The -k none option instructs Suricata to disable all checksum checks.
As a refresher, checksums are a way to detect if a packet has been modified in transit. Because you are using network traffic from a sample packet capture file, you won't need Suricata to check the integrity of the checksum.

Suricata adds a new alert line to the /var/log/suricata/fast.log file when all the conditions in any of the rules are met.
List the files in the /var/log/suricata folder again:
analyst@1f9774ada109:~$ ls -l /var/log/suricata
total 16
-rw-r--r-- 1 root root 1417 Sep 18 00:11 eve.json
-rw-r--r-- 1 root root  292 Sep 18 00:11 fast.log
-rw-r--r-- 1 root root 3239 Sep 18 00:11 stats.log
-rw-r--r-- 1 root root 1512 Sep 18 00:11 suricata.log

Note that after running Suricata, there are now four files in the /var/log/suricata directory, including the fast.log and eve.json files. You'll examine these files in more detail.
Use the `cat` command to display the `fast.log` file generated by Suricata:
analyst@1f9774ada109:~$ cat /var/log/suricata/fast.log
11/23/2022-12:38:34.624866  [**] [1:12345:3] GET on wire [**] [Classification: (null)] [Priority: 3] {TCP} 172.21.224.2:49652 -> 142.250.1.139:80
11/23/2022-12:38:58.958203  [**] [1:12345:3] GET on wire [**] [Classification: (null)] [Priority: 3] {TCP} 172.21.224.2:58494 -> 142.250.1.102:80

The output returns alert entries in the log:
Each line or entry in the fast.log file corresponds to an alert generated by Suricata when it processes a packet that meets the conditions of an alert generating rule. Each alert line includes the message that identifies the rule that triggered the alert, as well as the source, destination, and direction of the traffic.

Step 3: Examine eve.json output
Examine the additional output that Suricata generates in the eve.json file. The eve.json file is the standard and main Suricata log file and contains a lot more data than the fast.log file. This data is stored in a JSON format, which makes it much more useful for analysis and processing by other applications.
Use the cat command to display the entries in the eve.json file:
analyst@1f9774ada109:~$ cat /var/log/suricata/eve.json
{"timestamp":"2022-11-23T12:38:34.624866+0000","flow_id":1642872575785109,"pcap_cnt":70,"event_type":"alert","src_ip":"172.21.224.2","src_port":49652,"dest_ip":"142.250.1.139","dest_port":80,"proto":"TCP","tx_id":0,"alert":{"action":"allowed","gid":1,"signature_id":12345,"rev":3,"signature":"GET on wire","category":"","severity":3},"http":{"hostname":"opensource.google.com","url":"/","http_user_agent":"curl/7.74.0","http_content_type":"text/html","http_method":"GET","protocol":"HTTP/1.1","status":301,"redirect":"https://opensource.google/","length":223},"app_proto":"http","flow":{"pkts_toserver":4,"pkts_toclient":3,"bytes_toserver":357,"bytes_toclient":788,"start":"2022-11-23T12:38:34.620693+0000"}}
{"timestamp":"2022-11-23T12:38:58.958203+0000","flow_id":55877866525940,"pcap_cnt":151,"event_type":"alert","src_ip":"172.21.224.2","src_port":58494,"dest_ip":"142.250.1.102","dest_port":80,"proto":"TCP","tx_id":0,"alert":{"action":"allowed","gid":1,"signature_id":12345,"rev":3,"signature":"GET on wire","category":"","severity":3},"http":{"hostname":"opensource.google.com","url":"/","http_user_agent":"curl/7.74.0","http_content_type":"text/html","http_method":"GET","protocol":"HTTP/1.1","status":301,"redirect":"https://opensource.google/","length":223},"app_proto":"http","flow":{"pkts_toserver":4,"pkts_toclient":3,"bytes_toserver":357,"bytes_toclient":797,"start":"2022-11-23T12:38:58.955636+0000"}}

The output returns the raw content of the file. You'll notice that there is a lot of data returned that is not easy to understand in this format.
Use the jq command to display the entries in an improved format:
analyst@1f9774ada109:~$ jq . /var/log/suricata/eve.json | less
{
  "timestamp": "2022-11-23T12:38:34.624866+0000",
  "flow_id": 1642872575785109,
  "pcap_cnt": 70,
  "event_type": "alert",
  "src_ip": "172.21.224.2",
  "src_port": 49652,
  "dest_ip": "142.250.1.139",
  "dest_port": 80,
  "proto": "TCP",
  "tx_id": 0,
  "alert": {
    "action": "allowed",
    "gid": 1,
    "signature_id": 12345,
    "rev": 3,
    "signature": "GET on wire",
    "category": "",
    "severity": 3
  },
  "http": {
    "hostname": "opensource.google.com",
    "url": "/",
    "http_user_agent": "curl/7.74.0",
    "http_content_type": "text/html",
    "http_method": "GET",
    "protocol": "HTTP/1.1",
    "status": 301,
    "redirect": "https://opensource.google/",
    "length": 223
  },
  "app_proto": "http",
{
Press Q to exit the less command and to return to the command-line prompt.
Question: What is the value of the severity property for the first alert returned by the jq command?
Answer: 3

Use the jq command to extract specific event data from the eve.json file. `jq -c "[.timestamp,.flow_id,.alert.signature,.proto,.dest_ip]" /var/log/suricata/eve.json`:

analyst@1f9774ada109:~$ jq -c "[.timestamp,.flow_id,.alert.signature,.proto,.dest_ip]" /var/log/suricata/eve.json
["2022-11-23T12:38:34.624866+0000",1642872575785109,"GET on wire","TCP","142.250.1.139"]
["2022-11-23T12:38:58.958203+0000",55877866525940,"GET on wire","TCP","142.250.1.102"]

Note: The jq command above extracts the fields specified in the list in the square brackets from the JSON payload. The fields selected are the timestamp (.timestamp), the flow id (.flow_id), the alert signature or msg (.alert.signature), the protocol (.proto), and the destination IP address (.dest_ip).
Question: What is the destination IP address listed for the last event in the 'eve.json' file?
Answer: 142.250.1.102
Question: What is the alert signature for the first alert entry in the 'eve.json' file?
Answer: GET on wire

Use the jq command to display all event logs related to a specific flow_id from the eve.json file. The flow_id value is a 16-digit number and will vary for each of the log entries. Replace X with any of the flow_id values returned by the previous query. `jq "select(.flow_id==X)" /var/log/suricata/eve.json`:

analyst@1f9774ada109:~$ jq "select(.flow_id==1642872575785109)" /var/log/suricata/eve.json
{
  "timestamp": "2022-11-23T12:38:34.624866+0000",
  "flow_id": 1642872575785109,
  "pcap_cnt": 70,
  "event_type": "alert",
  "src_ip": "172.21.224.2",
  "src_port": 49652,
  "dest_ip": "142.250.1.139",
  "dest_port": 80,
  "proto": "TCP",
  "tx_id": 0,
  "alert": {
    "action": "allowed",
    "gid": 1,
    "signature_id": 12345,
    "rev": 3,
    "signature": "GET on wire",
    "category": "",
    "severity": 3
  },
  "http": {
    "hostname": "opensource.google.com",
    "url": "/",
    "http_user_agent": "curl/7.74.0",
    "http_content_type": "text/html",
    "http_method": "GET",
    "protocol": "HTTP/1.1",
    "status": 301,
    "redirect": "https://opensource.google/",
    "length": 223
  },
  "app_proto": "http",
  "flow": {
    "pkts_toserver": 4,
    "pkts_toclient": 3,
    "bytes_toserver": 357,
    "bytes_toclient": 788,
    "start": "2022-11-23T12:38:34.620693+0000"
  }
}
Note: A network flow refers to a sequence of packets between a source and destination that share common characteristics such as IP addresses, protocols, and more. In cybersecurity, network traffic flows help analysts understand the behavior of network traffic to identify and analyze threats. Suricata assigns a unique flow_id to each network flow. All logs from a network flow share the same flow_id. This makes the flow_id field a useful field for correlating network traffic that belongs to the same network flows.
